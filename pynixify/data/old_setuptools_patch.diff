diff --git a/setuptools/__init__.py b/setuptools/__init__.py
index 6c24cc2b..5c334d42 100644
--- a/setuptools/__init__.py
+++ b/setuptools/__init__.py
@@ -3,6 +3,7 @@
 import functools
 import os
 import re
+import sys
 import warnings
 
 import _distutils_hack.override  # noqa: F401
@@ -76,15 +77,65 @@ def _install_setup_requires(attrs):
 
     # Honor setup.cfg's options.
     dist.parse_config_files(ignore_option_errors=True)
-    if dist.setup_requires:
-        dist.fetch_build_eggs(dist.setup_requires)
 
-
-def setup(**attrs):
+    if 'PYNIXIFY' in os.environ:
+        from pathlib import Path
+        try:
+            out = Path(os.environ['out'])
+        except KeyError:
+            print("out environment variable not defined")
+            sys.exit(1)
+        setup_requires = dist.setup_requires
+
+        def norm_list_of_string(l):
+            # Most setup() arguments take either a string or a list of strings.
+            # Normalize this to a list of strings.
+            if isinstance(l, str):
+                return [l]
+            return l
+
+        install_requires = attrs.get('install_requires', dist.install_requires)
+        install_requires = list(norm_list_of_string(install_requires))
+
+        # Handle something like this:
+        # extras_require={
+        #     ':sys.platform == "darwin"': ['macfsevents'],
+        #     ':sys.platform == "linux"': ['pyinotify'],
+        # },
+        for (key, reqs) in attrs.get('extras_require', {}).items():
+            if not key.startswith(':'):
+                continue
+            marker = key[1:]
+            for req in norm_list_of_string(reqs):
+                install_requires.append(f'{req}; {marker}')
+
+        targets = [
+            ('setup_requires.txt', attrs.get('setup_requires', setup_requires)),
+            ('install_requires.txt', install_requires),
+            ('tests_requires.txt', attrs.get('tests_require', [])),
+        ]
+        for (filename, requirements) in targets:
+            with (out / filename).open("w") as fp:
+                fp.write('\n'.join(norm_list_of_string(requirements)))
+
+        import json
+        meta = {}
+        meta_attrs = {'description', 'url', 'license', 'version'}
+        for meta_attr in meta_attrs:
+            meta[meta_attr] = attrs.get(meta_attr)
+        meta["_fmt"] = "setuptools"
+        with (out / 'meta.json').open('w') as fp:
+            json.dump(meta, fp)
+    else:
+        if dist.setup_requires:
+            dist.fetch_build_eggs(dist.setup_requires)
+
+
+def setup( **attrs):
     # Make sure we have any requirements needed to interpret 'attrs'.
-    logging.configure()
     _install_setup_requires(attrs)
-    return distutils.core.setup(**attrs)
+    if "PYNIXIFY" not in os.environ:
+        return distutils.core.setup(**attrs)
 
 
 setup.__doc__ = distutils.core.setup.__doc__
diff --git a/setuptools/build_meta.py b/setuptools/build_meta.py
index 8ff9a5ce..04cf450f 100644
--- a/setuptools/build_meta.py
+++ b/setuptools/build_meta.py
@@ -62,6 +62,29 @@ SETUPTOOLS_ENABLE_FEATURES = os.getenv("SETUPTOOLS_ENABLE_FEATURES", "").lower()
 LEGACY_EDITABLE = "legacy-editable" in SETUPTOOLS_ENABLE_FEATURES.replace("_", "-")
 
 
+def _write_pynixify_files(config_settings, deps):
+    if config_settings is not None and "PYNIXIFY_OUT" in config_settings:
+        from pathlib import Path
+        import json
+        pynix_out = Path(config_settings['PYNIXIFY_OUT'])
+        for target in ("tests", "setup", "install"):
+            fp = (pynix_out / ("%s_requires.txt" % target)).open("w")
+            fp.write('\n'.join([str(req) for req in deps]))
+            fp.write('\nsetuptools\nsetuptools_scm[tomli]\nwheel')
+            fp.close()
+        meta = {}
+        if os.path.isfile(pynix_out / 'meta.json'):
+            with (pynix_out / 'meta.json').open('r') as fp:
+                meta.update(json.load(fp))
+        meta_attrs = {'description', 'url', 'license', 'version'}
+        for meta_attr in meta_attrs:
+            if meta_attr not in meta:
+                meta[meta_attr] = None
+        meta["_fmt"] = "setuptools" if "PYNIXIFY" in os.environ else "pyproject"
+        with (pynix_out / 'meta.json').open('w') as fp:
+            json.dump(meta, fp)
+
+
 class SetupRequirementsError(BaseException):
     def __init__(self, specifiers):
         self.specifiers = specifiers
@@ -376,7 +399,15 @@ class _BuildMetaBackend(_ConfigSettingsTranslator):
         with no_install_setup_requires():
             self.run_setup()
 
-        self._bubble_up_info_directory(metadata_directory, ".egg-info")
+        egg_info_dir = self._bubble_up_info_directory(metadata_directory, ".egg-info")
+        with open(os.path.join(egg_info_dir, "requires.txt"), "r") as f:
+            reqs = []
+            lines = f.readlines()
+            for line in lines:
+                if line.startswith("["):
+                    break
+                reqs.append(line)
+            _write_pynixify_files(config_settings, reqs)
         return self._bubble_up_info_directory(metadata_directory, ".dist-info")
 
     def _build_with_temp_dir(self, setup_command, result_extension,
@@ -408,6 +439,7 @@ class _BuildMetaBackend(_ConfigSettingsTranslator):
 
     def build_wheel(self, wheel_directory, config_settings=None,
                     metadata_directory=None):
+        _write_pynixify_files(config_settings, [])
         with suppress_known_deprecation():
             return self._build_with_temp_dir(['bdist_wheel'], '.whl',
                                              wheel_directory, config_settings)
